#!/usr/bin/python3 -d
# -*- coding: utf-8 -*-

import optparse
import re
import os.path
import sys
import subprocess

def removeQuotes(s):
	if s is None: return s
	r = s if s[0] != '"' and s[-1] != '"' else s[1:-1]
	r = r.strip()
	if len(r) == 0:
		return None
	else:
		return r

def execCmd(s):
	rs = os.system(cmd)
	if rs != 0:
		print ("Error: Something is wrong (cmd = '%s')" % cmd)
	return rs

def execSubprocess(cmd):
	proc = subprocess.Popen([ cmd ], stdout=subprocess.PIPE, shell=True)
	return proc.communicate()

CUE_ALBUM_PERFORMER = "ALBUM_PERFORMER"
CUE_FILENAME        = "FILENAME"
CUE_FILEFORMAT      = "FILEFORMAT"
ALBUM_TITLE      = "ALBUM_TITLE"
ALBUM_DATE       = "ALBUM_DATE"
ALBUM_PERFORMER  = "ALBUM_PERFORMER"
ALBUM_COMMENT    = "ALBUM_COMMENT"
ALBUM_GENGE      = "ALBUM_GENGE"
ALBUM_COMMENT    = "ALBUM_COMMENT"
ALBUM_DISCID     = "ALBUM_DISCID"
ALBUM_PICTURE    = "ALBUM_PICTURE"
ALBUM_TRACKS     = "ALBUM_TRACKS"
TRACK_NUM       = "TRACK_NUM"
TRACK_PERFORMER = "TRACK_PERFORMER"
TRACK_TITLE     = "TRACK_TITLE"

def inputString(s):
	return input(s)

def parseCue(cue, cueInfo, albumData):
	# cueInfo = {}
	info = {}
	isTrack = False
	tracks = []
	rems = {}

	for cueLine in open(cue, 'r'):
		cueLine = cueLine.strip();
		if len(cueLine) == 0:
			continue

		sSection, sArgs = cueLine.split(None, 1)
		vals = sArgs.split(None, 1)

		if isTrack == False:
			if sSection == "REM":
				rems[ vals[0] ] = vals[1]
			elif sSection == "PERFORMER":
				albumData[ALBUM_PERFORMER] = removeQuotes(sArgs)
			elif sSection == "TITLE":
				albumData[ALBUM_TITLE] = removeQuotes(sArgs)
			elif sSection == "FILE":
				match = re.search("\"(.+)\"\s+WAVE", sArgs)
				if not match is None: cueInfo[CUE_FILENAME] = match.group(1)
				match = re.search("\".+\.(.+)\"\s+WAVE", sArgs)
				if not match is None: cueInfo[CUE_FILEFORMAT] = match.group(1)
			elif sSection == "TRACK":
				isTrack = True

		if isTrack == True:
			if sSection == "TRACK":
				# save a description of a previous track
				if len(info) > 0:
					trackInfo = {}
					trackInfo[TRACK_TITLE]     = info.get('TITLE')
					trackInfo[TRACK_PERFORMER] = info.get('PERFORMER')
					trackInfo[TRACK_NUM] = trackNum
					tracks.append(trackInfo)
					info = {}

				trackNum = vals[0]
			else:
				info[sSection] = removeQuotes(sArgs)

	# save a description of the last track
	if len(info) > 0:
		trackInfo = {}
		trackInfo[TRACK_TITLE]     = info.get('TITLE')
		trackInfo[TRACK_PERFORMER] = info.get('PERFORMER')
		trackInfo[TRACK_NUM] = trackNum
		tracks.append(trackInfo)
		info = {}

	albumData[ALBUM_DATE]    = rems.get('DATE')
	albumData[ALBUM_COMMENT] = removeQuotes( rems.get('COMMENT') )
	albumData[ALBUM_GENGE]   = removeQuotes( rems.get('GENRE')   )
	albumData[ALBUM_DISCID]  = removeQuotes( rems.get('DISCID')  )
	albumData[ALBUM_TRACKS]  = tracks

	if albumData[ALBUM_DATE] is None:
		albumData[ALBUM_DATE] = inputString("Enter Album Date: ")
	if albumData[ALBUM_GENGE] is None:
		albumData[ALBUM_GENGE] = inputString("Enter Genre: ")

version = "%prog 0.1"
usage = "%prog -c file.cue -d destdir"
parser = optparse.OptionParser(usage = usage, version = version)

parser.add_option('-c', '--cue',
	action="store",
	dest="cue",
	help="input .cue-file",
	metavar="CUE_FILE")

parser.add_option('-d', '--dest',
	action="store",
	dest="dest",
	help="destination directory",
	metavar="DEST_DIR")

(options, args) = parser.parse_args()

if options.cue is None or options.dest is None:
	parser.error("incorrect arguments!")

# check if cue-file does not exist
if not os.path.isfile(options.cue):
	print ("Error: File '%s' is not exist" % options.cue)
	sys.exit(1)

cueInfo = {}
albumData = {}

# find an album picture
dirname = os.path.abspath(os.path.dirname(options.cue))
(out, err) = execSubprocess(
		("find \"%s\" -type f -iregex '.*/folder\.jpg'") % dirname
	)
if out:
	out = out.decode('UTF-8')
	if os.path.isfile(out.split('\n')[0]):
		albumData[ALBUM_PICTURE] = out.split('\n')[0]

if options.cue:
	parseCue(options.cue, cueInfo, albumData)

print (cueInfo)
print ("file:             '%s'" % cueInfo[CUE_FILENAME])
print ("file format:      '%s'" % cueInfo[CUE_FILEFORMAT])
print ("album title:      '%s'" % albumData[ALBUM_TITLE])
print ("album perforemer: '%s'" % albumData[ALBUM_PERFORMER])
print ("album date:       '%s'" % albumData[ALBUM_DATE])
print ("album genre:      '%s'" % albumData[ALBUM_GENGE])
print ("album comment:    '%s'" % albumData[ALBUM_COMMENT])
print ("album disc id:    '%s'" % albumData[ALBUM_DISCID])
if albumData.get(ALBUM_PICTURE):
	print ("album picture:    '%s'" % albumData[ALBUM_PICTURE])
else:
	print ("album picture:    None")
print ("")
for t in albumData[ALBUM_TRACKS]:
	print ( "%s / '%s' / '%s'"
		% (t[TRACK_NUM], t[TRACK_PERFORMER], t[TRACK_TITLE]) )

# checks
cueInfo[CUE_FILENAME] = os.path.join(dirname, cueInfo[CUE_FILENAME])
if not os.path.isfile(cueInfo[CUE_FILENAME]):
	print ("Error: File '%s' is not exist" % cueInfo[CUE_FILENAME])
	sys.exit(1)

if not os.path.isdir(options.dest):
	print ("Error: Directory '%s' is not exist" % options.dest)
	sys.exit(1)

print ()
print ("destination directory: '%s'" % options.dest)

# get approval to continue
print ()
answer = input("Continue? (Y/n): ")
if answer == "n": sys.exit(0)

# sys.exit(0)

# split the one big file according to cue
cmd = ( "cuebreakpoints \"%s\" | shnsplit -d \"%s\" -o %s \"%s\" -O never"
	% (options.cue, options.dest, cueInfo[CUE_FILEFORMAT], cueInfo[CUE_FILENAME]) )
if execCmd(cmd): sys.exit(1)

# unpack wv if need it
if cueInfo[CUE_FILEFORMAT] == "wv":
	for t in tracks:
		cmd = ( "wvunpack \"%s/split-track%s.wv\" -o \"%s/split-track%s.wav\" "
			% (options.dest, t[TRACK_NUM], options.dest, t[TRACK_NUM] ) )
		if execCmd(cmd): sys.exit(1)

	cmd = "rm \"%s\"/*.wv" % options.dest
	if execCmd(cmd): sys.exit(1)

	fileFormat = "wav"

# encoding to ogg
cmd = ( "oggenc -a \"%s\" -l \"%s\" -b192 -d \"%s\" -G \"%s\" "
	% (albumData[ALBUM_PERFORMER], albumData[ALBUM_TITLE], albumData[ALBUM_DATE], albumData[ALBUM_GENGE]) )

for t in albumData[ALBUM_TRACKS]:
	cmd += ( "-N \"%s\" -t \"%s\" \"%s/split-track%s.%s\" "
		% ( t[TRACK_NUM], t[TRACK_TITLE], options.dest, t[TRACK_NUM], cueInfo[CUE_FILEFORMAT] ) )

cmd += "-n \"%s/%%n - %%t.ogg\" " % options.dest
if execCmd(cmd): sys.exit(1)

cmd = "rm \"%s\"/*.%s" % (options.dest, cueInfo[CUE_FILEFORMAT])
if execCmd(cmd): sys.exit(1)

if albumData.get(ALBUM_PICTURE):
	cmd = "cp -f \"%s\" \"%s/folder.jpg\"" % (albumData[ALBUM_PICTURE], options.dest)
	if execCmd(cmd): sys.exit(1)

print("OK! DONE!")